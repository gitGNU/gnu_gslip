It is felt that all required functionality is in place. The SLIP methods support all necessary operations. Future expansions will include:
 1. An expansion of error handling capabilities to include:
   (a) Bulk and individual diagnostic message reclassification (error, warning, information).
   (b) Modification of the output format to support filename.linenumber.column number formats.
   (c) Rewriting message content.
   (d) Context 'hints'.
   (e) Provide an ability to retrieve diagnostic strings by the user for output display.
   (f) Providing SLIP tailored abort conditions (for use in try blocks).
   
 2. Modify ASCII lists for round-trip processing. This requires a fix to the gcc cygwin runtime libraries. It is not standards compliant (C++00) and does not work but is C++11 compliant.
 
 3. Editing. Everything has to be edited. Syntax, grammar, spelling, meaning, emotional appeal, everything. This includes the Reference Manual and the User's Manual.
 
 4. Consistency check methods to ensure that they are reasonable, disjunct, consistent, and complete.
 
 5. Additional attention to performance. Determine if some checks are redundant and can be removed as well as reconfiguring for performance. I think that the checks really retard performance (but the current performance seems to be fast, it could be faster).
 
 6. Analysis tools. Additional analysis tools for the AVSL. The existing tools are minimal. Liveness analysis.
 
 7. Cyclic list handling. Expanding the framework to support full graphs. Determine if true garbage collection is needed and whether a C# interface is required. Determine feasibility in a SLIP DLL.
 
 8. Utilities and expansions. What utilities should be developed and how can SLIP be expanded (other than incorporating cyclic lists).
 
 9. 64-bit/32-bit issues and development. Provide full capability for 64/32-bit environments. Determine interface issues with MSVS. 
 
 10. Test Framework expansion. Determine which tests need to be documented, re-architected and expanded. Determine if tests need to be created and the existing tests expanded.
 
 11. Provide expanded examples (fuzzy logic/expert rule systems, Perfect Partitioning of parameterized input, infinite arithmetic, matrix arithmetic w/wo Eigen Values, linkage to 'foreign' libraries as User Data, discrete event simulation with graphics output/input). 
 
 12. Readdress assignment. Should assignment (X = Y) preserve type?
